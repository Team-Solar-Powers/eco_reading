# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

# name: Java CI with Gradle

# on:
#   push:
#     branches: [ "master" ]
#   pull_request:
#     branches: [ "master" ]

# permissions:
#   contents: read

# jobs:
#   build:

#     runs-on: ubuntu-latest

#     steps:
#     - uses: actions/checkout@v3
#     - name: Set up JDK 11
#       uses: actions/setup-java@v3
#       with:
#         java-version: '11'
#         distribution: 'temurin'
#     - name: Build with Gradle
#       #uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25 # v2.6.0
#       #with:
#         #arguments: build
#       run: ./gradlew clean build'


name: CI/CD Pipeline  # GitHub Action 이름

on:
  push:
    branches:
      - main  # main branches에 push라는 event가 일어나면 아래의 내용을 실행한다.

jobs:
  build:
    runs-on: ubuntu-latest  # 현재 Repository는 ubuntu 기반에서 실행된다.

    steps: 
    - name: Checkout Repository  # Checkout은 현재의 Repository를 가리킴
      uses: actions/checkout@v2  # 현재 Repository를 실행한다.

    - name: Set up JDK  # JDK를 Set up하는 과정
      uses: actions/setup-java@v2  
      with:
        distribution: 'adopt' # Docker file에 adpot로 적혀있어서 따라 적
        java-version: '11'  # java11을 사용해서 jdk를 set up함

    - name: Build with Gradle
      run: ./gradlew build  # gradle 기반에서 build함

  deploy: # 배포하는 코드
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Deploy to AWS Elastic Beanstalk
      uses: aws-actions/configure-aws-credentials@v1 # aws 자격증명을 gitHub Action에서 쓸 수 있도록 만들어주는 코드 
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  # aws beanstalk에 있는 accessKey
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # aws beanstalk에 있는 accessKeyPWD
        aws-region: 'your-aws-region' # aws의 region seoul을 적으면 됨

    - name: Deploy to Elastic Beanstalk
      run: |
        eb deploy Ecoreading-env # elastic beanstalk 환경 이름으로 변경해야 함
